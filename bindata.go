// Code generated by go-bindata.
// sources:
// data/template/index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataTemplateIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x55\x5f\x8f\xe2\x36\x10\x7f\xe7\x53\x4c\x7d\x57\x6d\xa2\x03\x9b\xb0\x77\x95\x36\x17\xf2\xd2\x56\xea\x43\x75\x77\xea\x6d\x75\xcf\x26\x1e\x12\xef\x3a\xb6\x6b\x9b\x0b\x14\xe5\xbb\x57\x49\x80\x85\x40\x6f\x91\x40\x9e\xf9\xd9\xf3\xe7\x37\x7f\xc8\xaa\x50\xab\x7c\x92\x55\xc8\x45\x3e\x01\x00\xc8\x82\x0c\x0a\xf3\x6f\xb8\x7a\xe4\x52\x65\x6c\x10\x07\xc8\x17\x4e\xda\x00\xde\x15\x4b\x52\x85\x60\x7d\xca\x18\x7f\xe2\x5b\x5a\x1a\x53\x2a\xe4\x56\x7a\x5a\x98\xba\xd7\x31\x25\x57\x9e\x3d\xfd\xb3\x41\xb7\x63\xf7\x34\xa1\xc9\x41\xa0\xb5\xd4\xf4\xc9\x93\x3c\x63\x83\xbd\xa3\xf1\xb0\x53\x08\x61\x67\x71\x49\x02\x6e\x03\x2b\xbc\x27\x03\xd6\x7d\x56\x46\xec\x60\x7f\x12\x7b\x15\x2f\x9e\x4b\x67\x36\x5a\xcc\x0a\xa3\x8c\x4b\x61\xa5\x78\xf1\xfc\xf1\xe2\xd2\x01\x69\x2a\x19\xf0\x12\x59\x1b\x1d\x52\x48\xee\xed\x96\x25\xf4\x3d\xd4\x46\xf3\xc2\x4c\x81\xfc\x6a\x36\x4e\xa2\x83\x4f\xd8\x90\x29\x1c\xa4\x69\x87\x1b\x6f\x79\x31\xb2\x52\x73\x57\x4a\x9d\xc2\xdc\x6e\x2f\x01\xcb\x85\x90\xba\x4c\x21\x99\xdb\x2d\x2c\x2e\xf0\x76\x72\x3a\x56\xc9\xab\x59\xbd\x59\x2c\x16\x37\x93\x2a\x1d\xa2\xde\xa1\x52\xa6\xb9\x4e\x6d\xe6\xe5\xbf\x98\x42\x42\x17\x58\xdf\x40\x1b\x94\x65\x15\x52\xf8\x65\x3e\x1f\xc5\x6d\xbc\x0c\xd2\xe8\x14\xd6\x72\x8b\xe2\x12\x6c\xa4\x08\x55\x97\xd2\xfc\xe7\xff\xa1\xe1\x52\x1d\x8c\xbd\xd2\x29\x5c\x87\x2b\xe5\x89\xad\x0f\x3f\x22\xeb\x4d\x8d\xde\xf3\x12\xfd\x88\xb3\xa3\xf7\xfb\x8e\xea\xee\x9b\x1c\x0e\x3f\x2a\xc9\x15\x7c\xa4\xfb\xe1\xe1\xe1\x15\xef\x76\xe4\xbf\xef\xae\x59\xdf\x1d\x29\x58\x87\xb3\xc6\x71\x3b\x62\xce\x38\xd1\xab\x53\x58\x39\xe4\xcf\xb3\x4e\x71\xdb\xbf\x10\x23\x40\x49\x8d\xb3\xea\x50\xb0\xe4\xc3\x98\xfb\xf3\x6a\xbf\xbf\x64\xae\xfb\xcd\x58\x3f\x5a\xf9\x24\x63\xc3\x98\x67\xdd\x2c\x75\x43\x9f\xe4\xfb\x3d\xfd\xd3\x94\x6d\x9b\xb1\x2a\xc9\x27\x99\x90\xdf\x41\x8a\x25\x39\x26\xda\x0d\xa9\x90\xdf\xf3\x49\x76\x3e\xaa\x6f\x23\x61\x8a\x4d\x8d\x3a\xc4\xd4\x21\x17\xbb\x68\xbd\xd1\x45\xd7\x33\x10\xc5\x67\xcc\xc8\x35\x44\x8d\xd4\xc2\x34\xf4\x1b\xae\xbe\x9a\xe2\x19\x43\x3c\x66\xce\xc3\x12\x34\x36\x70\xba\x11\x91\xa6\xdb\x2b\xfb\x3d\xfd\xc3\xf8\xd0\xb6\x6c\x6d\xba\x06\x27\xf1\x88\x4f\x4f\x8d\x3e\xc4\x09\x4b\x78\x89\x00\xc7\x2e\x86\x90\xc9\xa9\x7a\x24\xa6\xdc\x5a\xd4\x22\x22\x99\xcd\x09\xbc\x03\xa4\x82\x07\x0e\xef\x80\x64\xcc\xe6\x63\x4f\x43\x69\xb4\x37\x0a\xa9\x32\x65\x44\x1a\x5c\xf9\x3e\xd4\x14\x5e\x5e\xdf\x78\xf4\x36\xba\xeb\xd6\xeb\xb4\xdf\x5d\x77\x31\xe5\x5a\xd6\x3c\x60\xb4\xf7\x85\x33\x4a\x3d\x76\xb3\x71\xce\xe5\x50\xe1\x28\x6e\xa7\x70\xb7\xe6\x3e\xdc\x8d\x6c\xb6\x67\x95\x05\x54\x1e\x47\x89\x72\x85\x2e\x44\xe4\xc4\x24\x7c\xfa\xfc\x08\x5f\xff\xfe\xf2\xe5\xf3\x5f\x8f\xbf\xff\xf6\xd3\x79\x5e\x43\x67\xb4\xf1\xc7\xc9\xcb\x16\xce\xd8\xa1\x2f\xd8\xf0\xa7\xf0\x5f\x00\x00\x00\xff\xff\x97\x25\xfc\x8e\x1c\x06\x00\x00")

func dataTemplateIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataTemplateIndexHtml,
		"data/template/index.html",
	)
}

func dataTemplateIndexHtml() (*asset, error) {
	bytes, err := dataTemplateIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/template/index.html", size: 1564, mode: os.FileMode(420), modTime: time.Unix(1481787818, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/template/index.html": dataTemplateIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"template": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{dataTemplateIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
